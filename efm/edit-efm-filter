#!/usr/bin/python3
# Interactively edit EFM filter parameters and view the results.

# XXX Run decoder in the background

import concurrent.futures
import gi
import matplotlib.backends.backend_gtk3cairo
import matplotlib.figure
import numpy as np
import os
import scipy.signal as sps
import sys

gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk

from efmdecode import EFM_RATE, zero_crossings
from efmfilter import SAMPLE_RATE, FFTFilter, EFMEqualiser, EFMSimFilter

class InputFile:
    """A .s16 RF sample that can be decoded."""

    def __init__(self, filename):
        self.filename = os.path.basename(filename)
        # mmap the file to avoid loading it all into memory
        self.data = np.memmap(filename=filename, dtype=np.int16, mode="r")

        self.offset = 200000

class GUI:
    """The GUI and its state."""

    def __init__(self, args):
        self.chart_length = 1000
        self.data_length = 100000

        self.fft = FFTFilter()
        self.eq = EFMEqualiser()
        #self.eq = EFMSimFilter()

        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=os.cpu_count())
        self.futures = []

        # Generate simple LPF for the "before" chart
        self.lpf_b, self.lpf_a = sps.firwin(numtaps=31, cutoff=2.0e6, fs=SAMPLE_RATE), [1.0]

        # Command-line args are input filenames
        self.files = [InputFile(arg) for arg in args]
        assert len(self.files) > 0
        self.current_file = self.files[0]

        # Main window
        window = Gtk.Window()
        # XXX keybinding for quit
        window.connect("delete-event", Gtk.main_quit)

        # Grid layout
        grid = Gtk.Grid()
        grid.set_column_spacing(10)
        window.add(grid)
        grid_w = 4

        # matplotlib charts
        figure = matplotlib.figure.Figure()
        figure.set_tight_layout(True)
        nrows, ncols = 3, 1
        self.before_ax = figure.add_subplot(nrows, ncols, 1)
        self.after_ax = figure.add_subplot(nrows, ncols, 2)
        self.zcs_ax = figure.add_subplot(nrows, ncols, 3)
        self.canvas = matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo(figure)
        self.canvas.set_size_request(1200 * ncols, 200 * nrows)
        grid.attach(self.canvas, 0, 0, grid_w, 1)

        col = 0
        row_count = [1]
        def add_scale(name):
            label = Gtk.Label.new(name)
            grid.attach(label, col, row_count[0], 1, 1)

            scale = Gtk.Scale.new(Gtk.Orientation.HORIZONTAL)
            scale.set_hexpand(True)
            scale.set_value_pos(Gtk.PositionType.RIGHT)
            grid.attach(scale, col + 1, row_count[0], 1, 1)

            row_count[0] += 1
            return scale

        # File selection widget
        label = Gtk.Label.new("File")
        grid.attach(label, col + 2, row_count[0], 1, 1)
        selector = Gtk.ComboBoxText()
        for ifile in self.files:
            selector.append(None, ifile.filename)
        selector.set_active(0)
        selector.connect("changed", self.file_changed)
        grid.attach(selector, col + 3, row_count[0], 1, 1)

        # Chart navigation widgets
        self.offset_scale = add_scale("File offset")
        self.offset_scale.connect("value-changed", self.offset_changed)

        # Zero offset widgets
        self.zero_scale = add_scale("Zero offset")
        self.zero_scale.set_range(-1000, 1000)
        self.zero_scale.set_value(0)
        self.zero_scale.set_digits(0)
        self.zero_scale.connect("value-changed", self.eq_changed)

        # Amplitude equaliser widgets
        self.amp_scales = []
        for i, freq in enumerate(self.eq.freqs):
            scale = add_scale("Amplitude %.1f MHz" % (freq / 1.0e6))
            scale.set_range(0.0, 1.5)
            scale.set_value(self.eq.amp[i])
            scale.set_digits(2)
            scale.connect("value-changed", self.eq_changed)
            self.amp_scales.append(scale)

        col = 2
        row_count = [2]

        # Phase equaliser widgets
        self.phase_base_scale = add_scale("Phase base")
        self.phase_base_scale.set_range(-np.pi, np.pi)
        self.phase_base_scale.set_value(0)
        self.phase_base_scale.set_digits(2)
        self.phase_base_scale.connect("value-changed", self.eq_changed)
        self.phase_scales = []
        for i, freq in enumerate(self.eq.freqs):
            scale = add_scale("Phase %.1f MHz" % (freq / 1.0e6))
            scale.set_range(-np.pi, np.pi)
            scale.set_value(self.eq.phase[i])
            scale.set_digits(2)
            scale.connect("value-changed", self.eq_changed)
            self.phase_scales.append(scale)

        # Update all the dynamic bits and show the window
        self.update_file()
        self.update_filter()
        window.show_all()

    def offset_changed(self, widget, user_data=None):
        self.current_file.offset = int(widget.get_value())
        self.update_filter()

    def file_changed(self, widget, user_data=None):
        self.current_file = self.files[int(widget.get_active())]
        self.update_file()
        self.update_filter()

    def eq_changed(self, widget, user_data=None):
        self.update_filter()

    def update_file(self):
        """Update the GUI for a change in input file."""

        # XXX Limit how far the user can scroll -- else it's a bit unwieldy!
        input_len = min(len(self.current_file.data), 5 * self.data_length)
        self.offset_scale.set_range(0, input_len - self.chart_length)
        self.offset_scale.set_value(self.current_file.offset)

    def update_filter(self):
        """Update the GUI for a change in filter parameters."""

        # Get data_length samples, centred on offset
        start = max(0, self.current_file.offset - (self.data_length // 2))
        end = min(len(self.current_file.data), start + self.data_length)
        self.input_data = self.current_file.data[start:end]
        self.output_data = None

        # Work out which samples to plot on the after chart
        self.input_data_offset = self.current_file.offset - start
        self.input_range = range(self.current_file.offset,
                                 self.current_file.offset + self.chart_length)

        # Compute the filter
        self.eq.amp[:] = [w.get_value() for w in self.amp_scales]
        self.eq.phase[:] = [w.get_value() + self.phase_base_scale.get_value() for w in self.phase_scales]
        print("amp=", self.eq.amp, "phase=", self.eq.phase)
        self.eq.compute(self.fft)

        # Cancel any already-scheduled background jobs if possible.
        # (This will include any that have already started or completed from
        # the last time we did this, but that's harmless.)
        for future in self.futures:
            future.cancel()
        self.futures = []

        # Start calculations in the background
        self.futures.append(self.executor.submit(self.update_before))
        self.futures.append(self.executor.submit(self.update_after))

    def update_before(self):
        # Filter and plot the "before" chart
        before_data = sps.lfilter(self.lpf_b, self.lpf_a, self.input_data)
        GLib.idle_add(self.plot_chart, self.before_ax, before_data, "Low-pass filtered signal")

    def update_after(self):
        # Filter the input data
        try:
            output_data = self.fft.apply(self.input_data, self.eq.filter)
        except Exception as e:
            print('Exception in fft.apply:', e)
            return

        # Plot the "after" chart
        GLib.idle_add(self.plot_chart, self.after_ax, output_data, "Equalised signal")

        # Find the spacings between crossings
        zero_offset = self.zero_scale.get_value()
        crossings = zero_crossings(output_data + zero_offset)
        spacings = crossings[1:] - crossings[:-1]

        # Plot the "zero crossings" chart
        GLib.idle_add(self.plot_zcs, spacings)

    def plot_chart(self, ax, y_data, title):
        """Idle callback to update the before or after chart."""

        # XXX This is still a bit clunky, as the plotting itself is expensive...
        ax.clear()
        input_data_len = self.input_range.stop - self.input_range.start
        ax.plot(self.input_range, y_data[self.input_data_offset:self.input_data_offset + input_data_len])

        # Tweak appearance
        ax.grid(True)
        ax.set_title(title)

        self.canvas.draw()

    def plot_zcs(self, spacings):
        """Idle callback to update the zero crossings chart."""

        # We should see spacings from 3 to 11 multiples of this...
        t_size = SAMPLE_RATE / EFM_RATE

        self.zcs_ax.clear()
        self.zcs_ax.hist(spacings, bins=200, range=(2 * t_size, 12 * t_size))
        # XXX This should be computed from zc_length
        self.zcs_ax.set_ylim(top=150)

        self.zcs_ax.set_title("Zero-crossing spacings")

        # Put X ticks on the expected EFM spacings (bearing in mind these
        # aren't expected to be exactly right, as the disc speed is allowed to
        # vary a bit)
        self.zcs_ax.set_xticks([t_size * i for i in range(3, 12)])
        self.zcs_ax.set_xticklabels(["T%d" % i for i in range(3, 12)])

        self.canvas.draw()

    def main(self):
        Gtk.main()

if __name__ == "__main__":
    gui = GUI(sys.argv[1:])
    gui.main()
