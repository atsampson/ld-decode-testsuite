#!/usr/bin/python3
# Compute and display the response of EFM filters for ld-decode.

import numpy as np
import numpy.fft as npfft
import scipy.interpolate as spi
import scipy.signal as sps

from showfilter import Filter, show_filters

fs = 40e6

filters = []

def fir_filter_from_spec(freq_spec, resp_spec, fir_size, fs, window='hamming'):
    """Generate coefficients for a FIR filter from a given specification: a
    sorted list of frequencies, and a list of complex responses at those
    frequencies, with intermediate points interpolated.

    This works by using a large inverse FFT to generate an impulse response,
    which does not necessarily have a smooth response between the points in
    the frequency domain, then windowing the IR to the specified size, which
    smooths it out.

    See: Steven W. Smith, "The Scientist and Engineer's Guide to DSP", 2nd
    edition, chapter 17, p299. <https://dspguide.com/>"""

    # Determine size of the FFT, making sure it's much bigger than the output
    real_size = 1024
    while real_size < (64 * fir_size):
        real_size *= 2
    complex_size = (real_size // 2) + 1

    # Frequency of each bin, up to the last frequency given in the spec
    freq_per_bin = (fs / 2) / complex_size
    nonzero_bins = min(int(freq_spec[-1] / freq_per_bin) + 1, complex_size)
    bin_freqs = np.arange(nonzero_bins) * freq_per_bin

    # Convert complex response spec to amplitude and unwrapped phase,
    # then interpolate to give amplitude/phase for each bin
    amp_interp = spi.interp1d(freq_spec, np.abs(resp_spec), kind='cubic')
    phase_interp = spi.interp1d(freq_spec, np.unwrap(np.angle(resp_spec)),
                                kind='linear')
    bin_amps = amp_interp(bin_freqs)
    bin_phases = phase_interp(bin_freqs)

    # Convert back into complex input data for the IFFT
    complex_data = np.zeros(complex_size, dtype=np.cdouble)
    complex_data[:nonzero_bins] = bin_amps * (np.cos(bin_phases) + 1.0j * np.sin(bin_phases))

    # Run the IFFT, giving a real result
    impulse = npfft.irfft(complex_data)

    # Rotate and window the result to get the FIR filter
    impulse = np.roll(impulse, fir_size // 2)
    return impulse[:fir_size] * sps.get_window(window, fir_size)

freq_spec = np.array([0.0, 5.0e6, 10.0e6, 15.0e6])
resp_spec = np.array([0.0, 0.0, 1.0, 0.0])
b = fir_filter_from_spec(freq_spec, resp_spec, 32, fs)
#filters.append(Filter('Test 1', b))

freq_spec = np.array([0.0, 5.0e6, 10.0e6, 15.0e6])
resp_spec = np.array([0.0, 0.0, -1.0j, 0.0])
b = fir_filter_from_spec(freq_spec, resp_spec, 32, fs)
#filters.append(Filter('Test 2', b))

if True:
    freq_spec = None
    resp_spec = None
    with open('ldv4300d-efm-filter.dat.ngspice') as f:
        import re

        while True:
            l = f.readline()
            if l == "":
                break
            l = l.strip()

            m = re.match(r'^<indep frequency (\d+)>$', l)
            if m is not None:
                # Insert a 0 at the start, since the simulation doesn't
                freq_spec = np.zeros(int(m.group(1)) + 1, dtype=np.double)
                for i in range(len(freq_spec) - 1):
                    l = f.readline().strip()
                    freq_spec[i + 1] = float(l)

            m = re.match(r'<dep ac.v\(out\) frequency>$', l)
            if m is not None:
                resp_spec = np.zeros(len(freq_spec), dtype=np.cdouble)
                for i in range(len(resp_spec) - 1):
                    l = f.readline().strip()
                    m = re.match(r'^(.*)([+-])j(.*)$', l)
                    resp_spec[i + 1] = complex(float(m.group(1)), float(m.group(2) + m.group(3)))

                # Duplicate the first data point to frequency 0
                resp_spec[0] = resp_spec[1]

                # Normalise
                resp_spec /= np.max(np.abs(resp_spec))

    with open('efm_filter.py', 'w') as f:
        f.write('# Generated by compute-efm-filter\n\n')
        f.write('import numpy as np\n\n')

        freq_out = []
        resp_out = []

        freq_step = 4e3
        next_freq = 0
        for i in range(len(freq_spec)):
            if freq_spec[i] >= next_freq:
                freq_out.append(freq_spec[i])
                resp_out.append(resp_spec[i])
                next_freq = freq_spec[i] + freq_step
            # The response is less interesting above 3Mhz...
            if freq_spec[i] >= 3e6:
                freq_step = 1e6

        def write_array(name, dtype, values):
            f.write('%s = np.array([\n' % name)
            pos = 0
            while pos < len(values):
                line = '   '
                while pos < len(values):
                    part = ' %s,' % values[pos]
                    if len(line) + len(part) > 78:
                        break
                    line += part
                    pos += 1
                line += '\n'
                f.write(line)
            f.write('    ], %s)\n' % dtype)

        write_array('efmfilter_freq', 'np.double', freq_out)
        write_array('efmfilter_resp', 'np.cdouble', resp_out)

    b = fir_filter_from_spec(freq_spec, resp_spec, 2048, fs)
    filters.append(Filter('Sim', b))

if True:
    from efm_filter import efmfilter_freq, efmfilter_resp
    b = fir_filter_from_spec(efmfilter_freq, efmfilter_resp, 2048, fs)
    filters.append(Filter('Saved', b))

# The LD-V4300D has two filters, an elliptic(-ish) LPF then an HPF.
b, a = sps.ellip(N=3, rp=0.5, rs=37.0, Wn=1.8e6, fs=fs)
#filters.append(Filter('LD-V4300D EFM LPF', b, a))

show_filters(filters, fs=fs)
