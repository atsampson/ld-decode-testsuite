#!/usr/bin/python3
# Compute and display the response of EFM filters for ld-decode.

import numpy as np
import scipy.signal as sps

from filterspec import fir_filter_from_spec, read_ngspice_spec, specs_to_python
from showfilter import Filter, show_filters

fs = 40e6

filters = []

spec = np.array([
    [0.0,     0.0,   0.0],
    [5.0e6,   0.0,   0.0],
    [10.0e6,  1.0,   0.0],
    [15.0e6,  0.0,   0.0],
    ])
b = fir_filter_from_spec(spec, 33, fs)
#filters.append(Filter('Test 1', b))

spec = np.array([
    [0.0,     0.0,   0.0],
    [5.0e6,   0.0,   0.0],
    [10.0e6,  1.0,   np.pi],
    [15.0e6,  0.0,   0.0],
    ])
b = fir_filter_from_spec(spec, 33, fs)
#filters.append(Filter('Test 2', b))

spec = np.array([
    np.linspace(0.0e6, 2.0e6, num=11),
    np.array([0.0, 0.2, 0.41, 0.73, 0.98, 1.03, 0.99, 0.81, 0.59, 0.42, 0.0]),
    np.array([0.0, -0.95, -1.05, -1.05, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2]) * -1.0,
    ]).transpose()
b = fir_filter_from_spec(spec, 2048, fs)
filters.append(Filter('Adam 2021', b))

spec = np.array([
    np.linspace(0.0e6, 1.9e6, num=11),
    np.array([0.0, 0.215, 0.41, 0.73, 0.98, 1.03, 0.99, 0.81, 0.59, 0.42, 0.0]),
    np.array([0.0, -0.92, -1.03, -1.11, -1.2, -1.2, -1.2, -1.2, -1.05, -0.95, -0.8]) * -1.25
    ]).transpose()
b = fir_filter_from_spec(spec, 2048, fs)
filters.append(Filter('Chad 2021-10-16', b))

orig_ddd_spec = read_ngspice_spec('ddd-rf-filter.dat.ngspice')
orig_efm_spec = read_ngspice_spec('ldv4300d-efm-filter.dat.ngspice')

specs_to_python([
    ('ddd_spec', orig_ddd_spec),
    ('efm_spec', orig_efm_spec),
    ], 'efm_filter.py')

SIM_SIZE = 2048

b = fir_filter_from_spec(orig_ddd_spec, SIM_SIZE, fs)
filters.append(Filter('DDD frontend sim', b))

b = fir_filter_from_spec(orig_efm_spec, SIM_SIZE, fs)
filters.append(Filter('LD-V4300D EFM sim', b))

if False:
    from efm_filter import ddd_spec, efm_spec

    b = fir_filter_from_spec(ddd_spec, SIM_SIZE, fs)
    filters.append(Filter('DDD frontend saved', b))

    b = fir_filter_from_spec(efm_spec, SIM_SIZE, fs)
    filters.append(Filter('LD-V4300D EFM saved', b))

# The DDD frontend has an HPF (C401 and C402) then the LPF.
# The -3dB point is about 8 kHz.
# 100 nF * 0.5 kOhm; fc = 1/(100e-9 * 0.5e3 * 2 * pi) = 3183 - no
# With 200 ohm (the R in the op-amp's ground) it's 7957 which is spot on...
# So - zero at 0 Hz, pole at 8 kHz

def pole_zero_iir(pole_f, zero_f, fs):
    # Pre-warp for bilinear transform
    w1 = 2 * fs * np.tan(zero_f / (2 * fs))
    w2 = 2 * fs * np.tan(pole_f / (2 * fs))

    tf_b, tf_a = sps.zpk2tf([-w1], [-w2], 1.0)  # was w2/w1
    return sps.bilinear(tf_b, tf_a, fs)

# RC filter: R = 200R, C = 100nF (pole about 8 kHz in simulation)
b, a = pole_zero_iir(1 / (100e-9 * 200 * 2 * np.pi), 0, fs)
#filters.append(Filter('DDD HPF approx', b, a))
# We would want a filter that just inverted the phase of this.

# Further thought: there's no relevant information under 750 kHz or so anyway.
# So try a sharper HPF?

# The LD-V4300D has two filters, an elliptic(-ish) LPF then an HPF.
b, a = sps.ellip(N=3, rp=0.5, rs=37.0, Wn=1.8e6, fs=fs)
#filters.append(Filter('LD-V4300D EFM LPF', b, a))

show_filters(filters, fs=fs)
